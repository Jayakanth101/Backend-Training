import { createQueryBuilder, Repository } from "typeorm";
import { WorkItemsService } from "../work-items.service";
import { WorkItem } from "../work-items.entity";
import { CreateWorkItemDto } from "../dto/create-work-item-dto";
import { Risk, State, Type } from "../enum/work-items-enum";
import { User } from "src/users/users.entity";
import { ProjectMemberEntity } from "src/tables/project-member/project-member.entity";
import { ProjectEntity } from "src/tables/project/project.entity";
import { Planning } from "src/planning/planning.entity";
import { SprintEntity } from "src/tables/sprints/sprints.entity";
import { Test, TestingModule } from "@nestjs/testing";
import { getRepositoryToken } from "@nestjs/typeorm";
import { Delete } from "@nestjs/common";


describe('WorkItem', () => {
    let service: WorkItemsService;
    let repo: Repository<WorkItem>;

    const mockUser: User = {
        id: 1,
        displayname: "Alen",
        email: "alen@gmail.com",
        password: "password",
        created_projects: [],
        assigned_projects: [],
        project_memberships: [],
        created_workitems: []
    }

    const mockProject: ProjectEntity = {
        project_id: 1,
        project_description: "First project",
        project_name: "Main project",
        sprints: [],
        work_items: [],
        project_creator: mockUser,
        members: []
    }

    const mockProjectMemberEntity: ProjectMemberEntity = {
        id: 1,
        user: mockUser,
        project: mockProject,
        role: "admin",
        assignedWorkItems: []
    }

    const mockSprint: SprintEntity = {
        id: 1,
        project: mockProject,
        project_id: 1,
        workitems: [],
        sprint_name: "First sprint",
        start_date: new Date(''),
        end_date: new Date(''),
        location: "ado",
    }

    const mockWorkitem: WorkItem = {
        id: 1,
        type: Type.Epic,
        title: "First Workitem",
        state: State.New,
        created_by: mockUser,
        description: "Sample workitem",
        assigned_to: 1,
        activity_date: new Date(''),
        area_path: "ado",
        iteration: "ado",
        assignedTo: mockProjectMemberEntity,
        sprint_id: 1,
        updated_at: new Date(''),
        created_at: new Date(''),
        completed_at: new Date(''),
        discussion: [],
        tags: [],
        childrens: [],
        sprint: mockSprint,
        project: mockProject,
        parent: null,
        classification: "business",
        planning: null
    }

    const mockPlanning: Planning = {
        planning_id: 1,
        work_item: mockWorkitem,
        priority: 1,
        story_point: 1,
        risk: Risk.Low,
        effort: 1,
        business_value: 1,
        time_criticality: 1,
        start_date: new Date(''),
        target_date: new Date(''),
    }

    mockWorkitem.planning = mockPlanning;
    mockProjectMemberEntity.assignedWorkItems.push(mockWorkitem);

    const mockWorkItemRepo = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        delete: jest.fn(),
        createQueryBuilder: jest.fn(() => ({
            andWhere: jest.fn().mockReturnThis(),
            leftJoin: jest.fn().mockReturnThis(),
            orderBy: jest.fn().mockReturnThis(),
            getMany: jest.fn()
        })),
    };

    beforeEach(async () => {
        const module: TestingModule = Test.createTestingModule({
            providers: [
                WorkItemsService,
                {
                    provide: getRepositoryToken(WorkItem),
                    useValue: mockWorkItemRepo
                }
            ]
        }).compile();
    });

    describe('create work item', () => {
        it('it create work item', async () => {
        })
    })

});
